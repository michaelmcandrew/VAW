<?php

function vawhooks_civicrm_pageRun(&$page) {
  if(1) { // TODO: replace with check to see that the page is CRM_Contact_Page_View_Tabbed
    
    /* CRM_Core_Error::debug($page);
    if(CRM_Contact_BAO_Contact::getContactType($this->_contactId)=='Organization')
      {
	require_once 'CRM/Member/BAO/Membership.php';
	$this->assign('vaw_membership', CRM_Member_BAO_Membership::getContactMembership($this->_contactId, 5, 0));
	
	//retreive the organisation's data quality field
	require_once "CRM/Core/BAO/CustomValueTable.php";
	$dataQuality=array('entityID'=>$this->_contactId, 'custom_75'=>'1');
	$dataQuality=CRM_Core_BAO_CustomValueTable::getValues($dataQuality);
	$dataQuality=$dataQuality['custom_75'];
	if(!$dataQuality) {
	  $this->assign('date_since_last_update', 'unknown');
	} else {
	  $yearsSinceLastUpdate=(time()-strtotime($dataQuality))/(365*24*60*60);
	  if($yearsSinceLastUpdate<2) {
	    $this->assign('date_since_last_update', 'less_than_two_years');
	  } elseif($yearsSinceLastUpdate<3) {
	    $this->assign('date_since_last_update', 'less_than_three_years');
	  } else {
	    $this->assign('date_since_last_update', 'more_than_three_years');
	  }
	}
	$yearsSinceLastUpdate;
	
      }
      }*/
  }
  }

function vawhooks_civicrm_tabs( &$tabs, $contactID ) {
  
  // tab replacements should be in the form
  //$tabreplacements['id']=array('weight'=>0, 'url'=>'/', 'title'=>'Title');
  
  $tabreplacements['group']=array('title'=>'Lists');
  $tabreplacements['rel']=array('weight'=>1);
  $tabreplacements['note']=array('weight'=>1000);
  $tabreplacements['log']=array('weight'=>10000);
  foreach($tabs as $key => $tab) {
    if(array_key_exists($tab['id'], $tabreplacements)) {
	foreach($tabreplacements[$tab['id']] as $field => $tabreplacement) {
	  $tabs[$key][$field]=$tabreplacement;
	}
      }
  }

  $tabs[] = array( 'id'    => 'LINk_issues',
		   'url'   => CRM_Utils_System::url( "civicrm/contact/view/activity", "reset=1&snippet=1&cid={$contactID}&activitytype=13"),
		   'title' => 'LINk issues',
		   'weight' => 300 );
  $tabs[] = array( 'id'    => 'support',
                   'url'   => CRM_Utils_System::url( "civicrm/contact/view/activity", "reset=1&snippet=1&cid={$contactID}&activitytype=12"),
                   'title' => 'Support',
                   'weight' => 50 );

  //     CRM_Core_Error::debug($tabs);
}

function vawhooks_civicrm_buildForm( $formName, &$form ) {
  //CRM_Core_Error::debug($form);
  //echo $formName;
  //$form->_values['fee']=array();
  //CRM_Core_Error::debug($form->_values['fee']);
  if ( $formName == 'CRM_Event_Form_Participant') {
    
    $form->_values=array();
    
    //Retreive the individuals organisation id
    $params['id'] = $params['contact_id'] = $form->_contactID;
    $contact = CRM_Contact_BAO_Contact::retrieve( $params, $defaults, $ids, true );
    //Find out if the contact has a current employer
    $params['id'] = $params['contact_id'] = $contact->employer_id;
    if($contact->employer_id) {
      // Retrieve and assign the organisation name
      // $org = CRM_Contact_BAO_Contact::retrieve( $params, $defaults, $ids, true );

      require_once "CRM/Core/BAO/CustomValueTable.php";
      $sector=array('entityID'=>$contact->employer_id, 'custom_37'=>'1'); // sector
      $sector=CRM_Core_BAO_CustomValueTable::getValues($sector);
      $sector=$sector['custom_37']; // sector
      if( $sector=='westminster_voluntary' || $sector=='voluntary_nonwestminster' ) {

	// Find the organisation's membership status
	require_once 'CRM/Member/BAO/Membership.php';
	$membership=CRM_Member_BAO_Membership::getContactMembership($org->id, 5, 0);
	//CRM_Core_Error::debug($membership['is_current_member']);
	if($membership['is_current_member']) {
	  $feeText='Member';
	} else {
	  $feeText='Non member';
	}
	//Find the organsiation income
	$cfn='78';
	$orgIncome=array('entityID'=>$contact->employer_id, 'custom_'.$cfn=>'1');
	$orgIncome=CRM_Core_BAO_CustomValueTable::getValues($orgIncome);
	$orgIncome=$orgIncome['custom_'.$cfn]; 
	
	//add to the end of the fee text dependent on this organisational income
	if($orgIncome<10000){
	  $feeText.=' - income less than 10,000';
	} elseif($orgIncome<250000){
	  $recVawMembershipFee=25;
	  $feeText.=' - income less than 250,000';
	} elseif($orgIncome<500000){
	  $recVawMembershipFee=50;
	  $feeText.=' - income less than 500,000';
	} elseif($orgIncome<1000000){
	  $recVawMembershipFee=75;
	  $feeText.=' - income less than 1,000,000';
	} else {
	  $recVawMembershipFee=100;
	  $feeText.=' - income more than 10,000';
	}
	
      } else {
	$feeText='Other (statutory, private or education sector)';
      }
    }
    $form->assign('currentEmployer', $feeText);
    //echo $feeText;
  }

  if ( $formName == 'CRM_Activity_Form_Activity' && !$form->_activityId ) {
    $defaults['status_id'] = 2;
    $form->setDefaults( $defaults );
  }

  if ( $formName == 'CRM_Member_Form_Membership' ) { // This addition is to give recommended price for membership based on organisational income

    //What is the number of the custom field that we are looking up?
    $cfn='78';
    require_once "CRM/Core/BAO/CustomValueTable.php";
    
    $orgIncome=array('entityID'=>$form->_contactID, 'custom_'.$cfn=>'1');
    $orgIncome=CRM_Core_BAO_CustomValueTable::getValues($orgIncome);
    $orgIncome=$orgIncome['custom_'.$cfn]; // change to the ID of the income custom table
    
    //create an array representing membership fees
    if($orgIncome<10000){
      $recVawMembershipFee=0;
    } elseif($orgIncome<250000){
      $recVawMembershipFee=25;
    } elseif($orgIncome<500000){
      $recVawMembershipFee=50;
    } elseif($orgIncome<1000000){
      $recVawMembershipFee=75;
    } else {
      $recVawMembershipFee=100;
    }
    
    //    CRM_Core_Error::debug($recVawMembershipFee);
    
    
    $form->assign( 'recommendedAmount', $recVawMembershipFee);
  }

}

?>